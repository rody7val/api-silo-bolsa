var config = require('../config');
var App = require('../app');
var ip = require('ip');
var moment = require('moment');

var Sensor = require('../app/controllers/sensor_controller');

// socket
var allClients = [];
App.io.sockets.on('connection', function (socket) {
	socket.timeOut = null;
	allClients.push(socket);

	var sensorObj = {
		// sensor: {
		// 	name: 'RASPI',
		// 	sector: 'EXTERIOR',
		// 	type: 22,
		// 	pin: 4,
		// 	data: {},
		// 	time: null,
		// 	prefix: 'EXT'
		// },

		disconnect: function(sk) {
			console.log('disconnect!');
			var i = allClients.indexOf(sk);
			clearTimeout(allClients[i].timeOut)
			delete allClients[i];
		},

		read: function() {
			// var sensor = this.sensor;

			// sensor.data = sensorLib.read(sensor.type, sensor.pin);
			// sensor.time = moment().unix();
			// console.log(`${sensor.name}: ${sensor.data.temperature.toFixed(1)}Â°C, ${sensor.data.humidity.toFixed(1)}%, ${moment.unix(sensor.time).format('h:mm:ss')}`);
			// enviar temperatura y humedad exterior
			var sensor = Sensor.getLastBySector('EXTERIOR');
			console.log(sensor.success ? sensor.data : sensor.err);
			socket.emit('dht22', sensor.data);

			socket.timeOut = setTimeout(function() {
				sensorObj.read();
			}, 30 * 1000);
		},

		start: function() {
			socket.on('start-dht22', function() {
				console.log('start!')
				sensorObj.read();
			});
		},

		stop: function() {
			socket.on('stop-dht22', function() {
				console.log('stop!')
				this.disconnect(socket);
			});
		}
	};

	socket.on('disconnect', function() {
		sensorObj.disconnect(socket);
	});

	sensorObj.start();
	sensorObj.stop();
});

// server
App.server.listen(config.port, function (err) {
	if (err) return console.log(err);
	var protocol = 'http://';
	console.log('####');
	console.log(`Servidor local: ${protocol}localhost:${config.port}`);
	console.log(`Servidor en tu red: ${protocol}${ip.address()}:${config.port}`);
	console.log('####');
});